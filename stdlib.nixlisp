;; bootstrap common macros
(define nil __prim_null)
(define nil? (lambda (x) (__prim_equals x nil)))

(define true __prim_true)
(define true? (lambda (x) (__prim_equals x true)))
(define false __prim_false)
(define false? (lambda (x) (__prim_equals x false)))

(define list (lambda xs xs))

(define cons (lambda (ca cd) (__prim_cons ca cd)))
(define cons? (lambda (x) (__prim_equals (__prim_expr_type x) "cons")))

(define-macro defun (lambda (name args . body)
  (list 'define name (list 'lambda args (cons 'begin body)))))

(define-macro defmacro (lambda (name args . body)
  (list 'define-macro name (list 'lambda args (cons 'begin body)))))

(defun falsish? (x) (__prim_or (nil? x) (false? x)))
(defun trueish? (x) (__prim_if (falsish? x) false true))

(defun throw (x) (__throw x))

(defun assert (cnd msg)
  (__prim_if (trueish? cnd) nil (throw msg)))

(defun car (i)
  (assert (cons? i) "expecting a cons")
  (__prim_car i))

(defun cdr (i)
  (assert (cons? i) "expecting a cons")
  (__prim_cdr i))

(defmacro if xs
  (define cond (car xs))
  (define if-t (car (cdr xs)))
  (define if-f (begin
    (define h (cdr (cdr xs)))
    (__prim_if (nil? h) nil
               (begin
                 (assert (nil? (cdr h)) "if takes at most 3 parameters")
                 (car h)))))
  (list '__prim_if cond if-t if-f))

(defmacro cond args
  (defun go (xs)
    (if
      (nil? xs) 'nil
      (begin
        (define clause (car xs))
        (define condition (car clause))
        (define value (car (cdr clause)))
        (list 'if condition value (go (cdr xs))))))
  (go args))

(defun eq? (x . xs)
  (defun go (rem)
    (cond
      ((nil? rem)                  true)
      ((__prim_equals (car rem) x) (go (cdr rem)))
      (true                        false)))
  (go xs))

;; type checks
(defun symbol? (x) (eq? (__prim_expr_type x) "symbol"))
(defun string? (x) (eq? (__prim_expr_type x) "string"))
(defun int? (x) (eq? (__prim_expr_type x) "int"))
(defun macro? (x) (eq? (__prim_expr_type x) "macro"))
(defun vector? (x) (eq? (__prim_expr_type x) "vector"))
(defun attrs? (x) (eq? (__prim_expr_type x) "attr"))

;; symbols

(defun symbol->string (x)
  (assert (symbol? x) "expected a symbol")
  (__prim_symbol_name x))

;; utilities

(defun builtin (name)
  (__prim_get_attr (->string name) __builtins))

(defun trace (msg)
  ((builtin "trace")
    ((builtin "deepSeq") msg msg) nil))

(defun fold-left (acc init seq)
   (if (nil? seq)
       init
       (begin
         (assert (cons? seq) "expecting a cons")
         (fold-left acc
                    (acc init (car seq))
                    (cdr seq)))))
;; strings

(defun ->string (x)
(cond ((string? x) x)
      ((symbol? x) (__prim_symbol_name x))
      ((int? x) ((builtin "toString") x))
      ((eq? x true)) "true"
      ((eq? x false)) "false"
      ((eq? x nil)) "nil"
      (true (throw "->string: unexpected type"))))

;; builtins

(define import (builtin "import"))
(defmacro fetchTarball xs
  ((builtin "fetchTarball") (eval (cons 'attrs xs))))

;; booleans

(defun and xs (fold-left __prim_and true xs))
(defmacro or xs
  (cond ((nil? xs)                  false)
        ((trueish? (eval (car xs))) true)
        (true                       (eval (cons 'or (cdr xs))))))

(defmacro and xs
  (cond ((nil? xs)                  true)
        ((falsish? (eval (car xs))) false)
        (true                       (eval (cons 'and (cdr xs))))))

(defun not (x) (if x false true))

;; numbers


(defun + xs
  (defun op (x y)
    (assert (int? y) (concat-strings "expecting an int, but got " (__prim_expr_type y)))
    (__prim_plus x y))
  (fold-left op 0 xs))

(defun * xs
  (defun op (x y)
    (assert (int? y) "expecting an int")
    (__prim_product x y))
  (fold-left op 1 xs))

(defun - (x . xs)
  (defun op (x y)
    (assert (int? y) "expecting an int")
    (__prim_minus x y))
  (fold-left op x xs))

(defun < (x . xs)
  (defun op (x y)
    (assert (int? y) "expecting an int")
    (__prim_lt x y))
  (fold-left op x xs))

(defun > (x . xs)
  (defun op (x y)
    (assert (int? y) "expecting an int")
    (__prim_gt x y))
  (fold-left op x xs))

;; strings

(defun concat-strings xs
  (defun concat-op (x y)
    (assert (string? y) "expecting a string")
    (__prim_plus x y))
  (fold-left concat-op "" xs))

;; utilities

(defmacro macroexpand (macro . args)
  (define evald (eval macro))
  (assert (macro? evald) (concat-strings "expecting a macro, but got " (__prim_expr_type evald)))
  (list 'apply (list '__prim_macro_to_lambda evald) args))

;; vectors


(defun list->vector (xs)
  ; FIXME This should be implemented in a faster way
  (cond ((cons? xs) (__prim_append (__prim_vector_singleton (car xs)) (list->vector (cdr xs))))
        ((nil? xs) __prim_vector_empty)
        (true (throw "list->vector: expecting a list"))))

(defun vector xs (list->vector xs))

(defun vector->list (xs)
  (assert (vector? xs) "vector->list: expected a vector")
  (defun ix (i) ((builtin "elemAt") xs i))
  (define len ((builtin "length") xs))
  (defun go (i)
    (if (eq? i len) nil
        (cons (ix i) (go (+ i 1)))))
  (go 0))

;; attrsets

(defun attrs xs
  (defun pairs (ys)
    (cond ((nil? ys) nil)
          ((cons? ys) (begin
                         (define name (car ys))
                         (define value (car (cdr ys)))
                         (cons (__prim_name_value_pair (->string name) value) (pairs (cdr (cdr ys))))))
          (true (throw "attrs: expensing a cons pair"))))
  ((builtin "listToAttrs") (list->vector (pairs xs))))

(defun getattr (attr . path)
  (defun go (acc xs)
    (cond ((nil? xs) acc)
          ((cons? xs) (go (__prim_get_attr (->string (car xs)) acc) (cdr xs)))
          (true (throw "attr: expecting a cons list"))))
  (go attr path))