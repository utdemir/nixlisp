;; bootstrap common macros (defun, defmacro, if, cond)
(define nil __prim_null)
(define nil? (lambda (x) (__prim_equals x nil)))

(define car (lambda (i) (__prim_car i)))
(define cdr (lambda (i) (__prim_cdr i)))

(define list (lambda xs xs))

(define cons (lambda (ca cd) (__prim_cons ca cd)))
(define cons? (lambda (x) (__prim_equals (__prim_expr_type x) "cons")))

(define-macro defun (lambda (name args . body)
  (list 'define name (list 'lambda args (cons 'begin body)))))

(define-macro defmacro (lambda (name args . body)
  (list 'define-macro name (list 'lambda args (cons 'begin body)))))

(defmacro if xs
  (define cond (car xs))
  (define if-t (car (cdr xs)))
  (define if-f (begin
    (define h (cdr (cdr xs)))
    (__prim_if (nil? h) nil
               (car h))))
  (list '__prim_if cond if-t if-f))

(defmacro cond args
  (defun go (xs)
    (if
      (nil? xs) 'nil
      (begin
        (define clause (car xs))
        (define condition (car clause))
        (define value (car (cdr clause)))
        (list 'if condition value (go (cdr xs))))))
  (go args))

;; symbols

(defun symbol? (x) (__prim_equals (__prim_expr_type x) "symbol"))
(defun symbol->string (x) (__prim_symbol_name x))

;; strings

(defun string? (x) (__prim_equals (__prim_expr_type x) "string"))
(defun stringish (x)
  (cond ((string? x) x)
        ((symbol? x) (symbol->string x))
        (true (throw "stringish: expecting a symbol or a string"))))

;; utilities

(defun builtin (name)
  (__prim_get_attr (stringish name) __builtins))

(defun trace (msg)
  ((builtin "trace")
    ((builtin "deepSeq") msg msg) nil))

(defun throw (msg)
  ((builtin "throw") msg))

(defun assert (cond msg)
  (if cond nil (throw msg)))

(defun fold-left (f init seq)
   (if (nil? seq)
       init
       (fold-left f
                  (f init (car seq))
                  (cdr seq))))

;; builtins

(define import (builtin "import"))
(defmacro fetchTarball xs
  ((builtin "fetchTarball") (eval (cons 'attrs xs))))

;; booleans

(define true __prim_true)
(define false __prim_false)

(defun eq? (x . xs)
  (defun go (rem)
    (cond
      ((nil? rem)                  true)
      ((__prim_equals (car rem) x) (go (cdr rem)))
      (true                        false)))
  (go xs))

(defun and xs (fold-left __prim_and true xs))
(defun or xs (fold-left __prim_or false xs))

(defun not (x) (if x false true))

;; numbers

(defun int?     (x) (eq? (__prim_expr_type x) "int"))

(defun + xs (fold-left __prim_plus 0 xs))
(defun - (x . xs) (fold-left __prim_minus x xs))
(defun * xs (fold-left __prim_product 1 xs))

;; utilities

(defmacro macroexpand (macro . args)
  (list 'apply (list '__prim_macro_to_lambda macro) args))

;; vectors

(defun vector? (x) (eq? (__prim_expr_type x) "vector"))

(defun list->vector (xs)
  ; FIXME This should be implemented in a faster way
  (cond ((cons? xs) (__prim_append (__prim_vector_singleton (car xs)) (list->vector (cdr xs))))
        ((nil? xs) __prim_vector_empty)
        (true (throw "list->vector: expecting a list"))))

(defun vector xs (list->vector xs))

(defun vector->list (xs)
  (assert (vector? xs) "vector->list: expected a vector")
  (defun ix (i) ((builtin "elemAt") xs i))
  (define len ((builtin "length") xs))
  (defun go (i)
    (if (eq? i len) nil
        (cons (ix i) (go (+ i 1)))))
  (go 0))

;; attrsets

(defun attrs? (x) (eq? (__prim_expr_type x) "attr"))
(defun attrs xs
  (defun pairs (ys)
    (cond ((nil? ys) nil)
          ((cons? ys) (begin
                         (define name (car ys))
                         (define value (car (cdr ys)))
                         (cons (__prim_name_value_pair (stringish name) value) (pairs (cdr (cdr ys))))))
          (true (throw "attrs: expensing a cons pair"))))
  ((builtin "listToAttrs") (list->vector (pairs xs))))

(defun getattr (attr . path)
  (defun go (acc xs)
    (cond ((nil? xs) acc)
          ((cons? xs) (go (__prim_get_attr (stringish (car xs)) acc) (cdr xs)))
          (true (throw "attr: expecting a cons list"))))
  (go attr path))
